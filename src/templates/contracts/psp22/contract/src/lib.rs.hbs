#![cfg_attr(not(feature = "std"), no_std, no_main)]

#[openbrush::implementation(PSP22)]
#[openbrush::contract]
pub mod {{contract_name_snake}} {
    use ink::codegen::{Env, EmitEvent};
    use openbrush::traits::Storage;

    #[ink(event)]
    pub struct TransferEvent {
        #[ink(topic)]
        from: Option<AccountId>,
        #[ink(topic)]
        to: Option<AccountId>,
        value: Balance,
    }

    #[ink(event)]
    pub struct ApprovalEvent {
        #[ink(topic)]
        owner: AccountId,
        #[ink(topic)]
        spender: AccountId,
        value: Balance,
    }

    #[ink(storage)]
    #[derive(Storage)]
    pub struct {{contract_name_pascal}} {
        #[storage_field]
        psp22: psp22::Data,
    }

    #[overrider(psp22::Internal)]
    fn _emit_transfer_event(
        &self,
        from: Option<AccountId>,
        to: Option<AccountId>,
        amount: Balance,
    ) {
        self.env().emit_event(TransferEvent {
            from,
            to,
            value: amount,
        });
    }

    #[overrider(psp22::Internal)]
    fn _emit_approval_event(&self, owner: AccountId, spender: AccountId, amount: Balance) {
        self.env().emit_event(ApprovalEvent {
            owner,
            spender,
            value: amount,
        });
    }

    impl {{contract_name_pascal}} {
        #[ink(constructor)]
        pub fn new(total_supply: Balance) -> Self {
            let mut instance = Self {
                psp22: Default::default()
            };
            Internal::_mint_to(&mut instance, Self::env().caller(), total_supply).expect("Should mint");
            instance
        }

        #[ink(message)]
        pub fn get_total_supply(&self) -> Balance {
            PSP22::total_supply(self)
        }
    }
}
